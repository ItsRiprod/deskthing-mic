name: Publish package, create Release and attach daemon artifacts

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.set_job_outputs.outputs.release_upload_url }}
      assets_json: ${{ steps.set_job_outputs.outputs.assets_json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Install dependencies
        run: npm ci

      - name: Build (bundle + types + go)
        run: |
          # Default cross-compile target (override with env vars if needed)
          export GO_TARGET_OS=${{ env.GO_TARGET_OS || 'linux' }}
          export GO_TARGET_ARCH=${{ env.GO_TARGET_ARCH || 'arm64' }}
          npm run build

      - name: Publish to npm
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "$NPM_TOKEN" ]; then echo "NPM_TOKEN is not set" && exit 1; fi
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm publish --access public

      - name: Create or update GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }}
            
            Created from package.json version ${{ steps.pkg.outputs.version }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare job outputs (release upload URL + assets list)
        id: set_job_outputs
        run: |
          set -e
          # Build a JSON array of files under dist/lib
          if [ -d dist/lib ]; then
            assets_json=$(node -e "const fs=require('fs'); const a=fs.readdirSync('dist/lib').map(f=>({path:'dist/lib/'+f,name:f})); console.log(JSON.stringify(a))")
          else
            assets_json='[]'
          fi

          # expose outputs for downstream jobs
          echo "release_upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
          echo "assets_json=$assets_json" >> $GITHUB_OUTPUT

  upload-assets:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: ${{ needs.build-and-release.outputs.assets_json != '[]' && needs.build-and-release.outputs.release_upload_url != '' }}
    strategy:
      matrix:
        asset: ${{ fromJson(needs.build-and-release.outputs.assets_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload asset to release
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ needs.build-and-release.outputs.release_upload_url }}
          asset_path: ${{ matrix.asset.path }}
          asset_name: ${{ matrix.asset.name }}
          asset_content_type: application/octet-stream
